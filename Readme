-------------------------- Filtre -------------------------------------

Nume: Bechir Sibel-Leila
Grupa: 332CC


	Am avut de implementat filrele Sobel si Mean Removal asupra unor imagini .pgm, eu am aplicat aceste filtre in C si MPI.

	Cuprins README:
	0. Rulare
	1. Fisiere de input / output
		1.1. citirea 
			1.1.1 Topologie
			1.1.2. Lista de imagini
			1.1.3. Citirea unei imagini
		1.2. scrierea
			1.2.1 Scrierea imaginii
			1.2.2 Statistica
	2. Topologie
	3. Prelucratea imaginii 
		3.1. copii > 0
			3.1.1. nod
			3.1.2. catre copii
			3.1.3. catre parinte.
		3.2. copii = 0
	4. Altele

---------
0. Rulare
- prin rularea comenzii "make" se va crea exectabilul "filtru" rularea se face cu "mpirun -np N ./filtru topologie.in imagini.in"
	> N - numarul de procese
	> topologie - lista de adiacenta a arborelui
	> imagini.in - imaginile care se vor prelucra

----------
1. Fisiere de input / output
	Functile care prelucreaza fisiere se gasesc in Read.h.
	Toate functiile de citire / scriere se realizeaza de catre nodul root (0).
	------------
	1.1. Citirea
		---------------
		1.1.1 Topologie
			Am realizat citirea fisierului de topologie intr-o matrice.
			Transform primul element in intreg, gasind astfel parintele.
			Pentru fiecare numar de pe linia respectiva determin destinatia.
			Setez in matricea de topologie cu 1 daca exista legatura intre noduri, altfel se considera 0.
			Parcurg fiecare cifra pana la intalnirea lui "blank" ca apoi sa determin urmatoarea destinatie deoarece ele sunt prezentate asemenea unei liste de adiacenta.
		-----------------------
		1.1.2. Lista de imagini
			Citesc numarul de imaginii.
			Citesc fiecare linie si determin tipul de filtru, fisierul IN si fisierul OUT.
			Daca este sobel setez s, respectiv m daca este mean removal; deoarece eu memorez in types care este un vector de caractere.
			Copiez fisierul de input si output intr-un vector de string-uri.
		-------------
		1.1.3. Citirea unei imagini
			Conform documentatiei am citit un numar magic, apoi un comentariu apoi latimea si inaltimea ca apoi sa citesc matricea de pixeli.
	-------------
	1.2. Scrierea
		-----------------------
		1.2.1 Scrierea imaginii
			Conform documentatiei am creat un pmg astfel: am scris numarul magic de la citire, apoi un comentariul de la citire apoi latimea si inaltimea ca apoi sa completez cu matricea de pixeli.
		----------------
		1.2.2 Statistica
			sriu numarul de linii prelucrate.
			
-------------
2. Topologie
	Am transmis de la 0 catre toate nodurile matricea de topologie. Am preferat aceasta metoda, deoarece stiu ca toate nodurile au nevoie de ea.

-----------------------
3. Prelucratea imaginii
	--------------
	3.1. copii > 0
		3.1.1. Nod:
		 - determinam numarul de copii al rootului
		 - setam marginile de deasupra matricii si dedesubt (up si down)
		 - setam pe "0" numarul de copii pe care i-am vizitat
		 - trimitem catre copii, imaginea fragmentata
		----------------
		3.1.2. catre copii
		- trimitem un caracter care sa ne ajute la recv sa stim sursa
		- trimitem pozitiile de la cat pana la cat este matricea
		- trimitem inaltimea si latimea matricii
		- trimitem un fragment din matrice
		- trimitem linia de deasupra si dedesuptul fragmentului nostru din matrice
		- trimitem linia de dedesuptul fragmentului nostru din matrice
		------------------
		3.1.3. catre parinte
		- trimitem matricea prelucrata
	--------------
	3.2. copii = 0
		- prelucrez matricea
		- trimit matricea prelucrata
		- trimit statistica

---------
4. Altele
- Pentru simplificarea algoritmilor, am utilizat imagini in tonuri de gri (gray-scale) pentru care fiecare pixel va avea o valoare in intervalul 0 - 255.
